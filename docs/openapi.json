{
  "openapi": "3.0.3",
  "info": {
    "title": "Blindate Api",
    "description": "This is a simple API",
    "contact": {
      "email": "hafidmahdi23@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/Xyedo/blindate-api/0.0.1",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "Signup"
    },
    {
      "name": "Authentication",
      "description": "login, get new accessToken, logout"
    },
    {
      "name": "Users",
      "description": "must sign in first"
    },
    {
      "name": "Match",
      "description": "to search,accept,decline and find match"
    },
    {
      "name": "Conversation",
      "description": "to create, update, get conversation"
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log in User",
        "operationId": "postAuthHandler",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authReq"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successfull login",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=IAHH_CAHAC; maxAge:304343; path=/api/v1"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRes"
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "401": {
            "description": "invalid email or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth_response_unauth"
                }
              }
            }
          },
          "422": {
            "description": "validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth_post_err_validation"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "when accessToken is invalid, you have to use this path to get it using your cookie refreshToken",
        "tags": [
          "Authentication"
        ],
        "operationId": "putAuthHandler",
        "summary": "to get new AccessToken",
        "security": [
          {
            "refreshAuth": []
          }
        ],
        "responses": {
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "403": {
            "$ref": "#/components/responses/invalid_refresh_cookie"
          },
          "401": {
            "$ref": "#/components/responses/invalid_creds_refresh_token"
          },
          "200": {
            "description": "success refreshing accessToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authRes"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAuthHandler",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "refreshAuth": []
          }
        ],
        "description": "use when logging out, it removes the refreshToken",
        "summary": "using when log out",
        "responses": {
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "403": {
            "$ref": "#/components/responses/invalid_refresh_cookie"
          },
          "401": {
            "$ref": "#/components/responses/invalid_creds_refresh_token"
          },
          "200": {
            "description": "success logging out",
            "content": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=IAHH_CAHAC; maxAge:-1; path=/api/v1"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "log out success"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Signup"
        ],
        "summary": "Sign Up New User",
        "operationId": "postUserHandler",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReqUser"
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "201": {
            "description": "item created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201"
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "422": {
            "$ref": "#/components/responses/error_validation_user"
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "unique indentifier for users",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          }
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "loginAuth": []
          }
        ],
        "summary": "Get User By Id",
        "operationId": "getUserById",
        "responses": {
          "200": {
            "description": "item created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found_user_id"
          },
          "403": {
            "$ref": "#/components/responses/forbidden_access"
          },
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Edit current User",
        "operationId": "patchUserByIdHandler",
        "requestBody": {
          "description": "if using oldPassword props, you must use newPassword prop too",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/users_userId_body"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "loginAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "item edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "404": {
            "$ref": "#/components/responses/not_found_user_id"
          },
          "403": {
            "$ref": "#/components/responses/forbidden_access"
          },
          "422": {
            "$ref": "#/components/responses/error_validation_user"
          },
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          }
        }
      }
    },
    "/users/{userId}/profile-picture": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "description": "unique indentifier for users",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          }
        }
      ],
      "put": {
        "summary": "upload user profile image",
        "description": "upload user profile image",
        "tags": [
          "Users"
        ],
        "operationId": "putUserImageProfileHandler",
        "parameters": [
          {
            "in": "query",
            "name": "selected",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "security": [
          {
            "loginAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "format": "binary",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "$ref": "#/components/responses/not_found_user_id"
          },
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "413": {
            "$ref": "#/components/responses/request_too_large"
          },
          "422": {
            "$ref": "#/components/responses/invalid_mime_type"
          },
          "403": {
            "$ref": "#/components/responses/forbidden_access"
          },
          "200": {
            "description": "valid put profile image",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "user profile upload success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "profilePicture": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "d290f1ee-6c54-4b01-90e6-d701748f0851.png"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/new-match": {
      "description": "to find a new match with another user",
      "summary": "find a new match",
      "get": {
        "tags": [
          "Match"
        ],
        "security": [
          {
            "loginAuth": []
          }
        ],
        "description": "finding a new user to match, after this, you can go to the postNewMatchHandler to decline or request to match",
        "operationId": "getNewUserToMatchHandler",
        "summary": "new match candidate",
        "responses": {
          "404": {
            "$ref": "#/components/responses/not_found_user_id"
          },
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "200": {
            "description": "get new user to match",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "newCandidateMatch": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/bigUser_obj"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/match": {
      "get": {
        "tags": [
          "Match"
        ],
        "security": [
          {
            "loginAuth": []
          }
        ],
        "description": "to get all match requested user",
        "summary": "get match req user",
        "operationId": "getAllMatchRequestedHandler",
        "responses": {
          "409": {
            "$ref": "#/components/responses/resource_conflict"
          },
          "404": {
            "$ref": "#/components/responses/not_found_user_id"
          },
          "200": {
            "description": "get all match requested",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "newCandidateMatchs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/bigUser_obj"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Match"
        ],
        "description": "after getting a match, you have to decline it or request it",
        "summary": "to match or decline user",
        "operationId": "postNewMatchHandler",
        "security": [
          {
            "loginAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "to what user and what match response",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "toUserId",
                  "matchStatus"
                ],
                "type": "object",
                "properties": {
                  "toUserId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "matchStatus": {
                    "type": "string",
                    "enum": [
                      "requested",
                      "declined"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "409": {
            "description": "invalid validation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "fail"
                        },
                        "message": {
                          "type": "string",
                          "example": "please refer to the documentation"
                        },
                        "errors": {
                          "type": "object",
                          "properties": {
                            "toUserId": {
                              "type": "string",
                              "example": "must be provided and must be valid uuid "
                            },
                            "matchStatus": {
                              "type": "string",
                              "example": "must be provided and the values is one of `requested` or `declined`"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "fail"
                        },
                        "message": {
                          "type": "string",
                          "example": "already matched"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found_user_id"
          },
          "201": {
            "description": "success creating match",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "matchId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/match/{matchId}/request": {
      "description": "change request to match",
      "parameters": [
        {
          "name": "matchId",
          "in": "path",
          "description": "unique indentifier for match",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0231"
          }
        }
      ],
      "summary": "change request on match",
      "put": {
        "tags": [
          "Match"
        ],
        "security": [
          {
            "loginAuth": []
          }
        ],
        "description": "to change from matchStatus to accept or declined",
        "summary": "put matchStatus on request",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "request": {
                    "type": "string",
                    "enum": [
                      "declined",
                      "accepted"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "403": {
            "$ref": "#/components/responses/forbidden_access"
          },
          "409": {
            "description": "error validation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "please refer to the documentation"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "request": {
                          "type": "string",
                          "example": "request must required and must matchStatus enums"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "request successly been changed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/match/{matchId}/reveal": {
      "summary": "put reveal on match",
      "parameters": [
        {
          "name": "matchId",
          "in": "path",
          "description": "unique indentifier for match",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0231"
          }
        }
      ],
      "description": "change reveal matchStatus to requested,declined,accepted",
      "put": {
        "tags": [
          "Match"
        ],
        "summary": "put matchStatus on reveal",
        "security": [
          {
            "loginAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reveal": {
                    "type": "string",
                    "enum": [
                      "requested",
                      "declined",
                      "accepted"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "reveal successly been changed"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden_access"
          },
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          },
          "409": {
            "description": "error validation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "please refer to the documentation"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "reveal": {
                          "type": "string",
                          "example": "reveal must required and must matchStatus enums"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversation": {
      "post": {
        "security": [
          {
            "loginAuth": []
          }
        ],
        "tags": [
          "Conversation"
        ],
        "summary": "new conversation",
        "description": "post a conversation based on matchId",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "matchId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "conversationId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/forbidden_access"
          },
          "409": {
            "description": "error on validation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "fail"
                    },
                    "message": {
                      "type": "string",
                      "example": "please refer to the documentation"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "matchId": {
                          "type": "string",
                          "example": "must be  required and must valid uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/bad_request_json"
          }
        }
      },
      "get": {
        "security": [
          {
            "loginAuth": []
          }
        ],
        "summary": "get conversation by userId",
        "description": "get all conversation  by userId",
        "tags": [
          "Conversation"
        ],
        "responses": {
          "200": {
            "description": "success getter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/conversation"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found_response"
          }
        }
      }
    },
    "/conversation/{conversationId}": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "summary": "get conversation by Id",
        "security": [
          {
            "loginAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#components/schemas/conversation"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found_response"
          }
        }
      },
      "delete": {
        "tags": [
          "Conversation"
        ],
        "summary": "delete conversation by Id",
        "security": [
          {
            "loginAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "deletion success",
            "content": {
              "application/json":{
                "schema":{
                  "type": "object",
                  "properties": {
                    "status":{
                      "type": "string",
                      "example":"success"
                    },
                    "message":{
                      "type": "string",
                      "example":"deleting conversationId success"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/not_found_response"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "not_found_response": {
        "description": "not found any resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "resource not found"
                }
              }
            }
          }
        }
      },
      "invalid_mime_type": {
        "description": "invalid mime type",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "not valid mime-type"
                }
              }
            }
          }
        }
      },
      "request_too_large": {
        "description": "request too large",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "max byte to upload is 8mB"
                }
              }
            }
          }
        }
      },
      "error_validation_user": {
        "description": "error on validation json body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "enum": [
                    "please refer to the documentation",
                    "email is already taken"
                  ]
                },
                "errors": {
                  "type": "object",
                  "properties": {
                    "fullname": {
                      "type": "string",
                      "example": "must be required and between 1-50 characters"
                    },
                    "alias": {
                      "type": "string",
                      "example": "must be required and between 1-15 characters"
                    },
                    "email": {
                      "type": "string",
                      "example": "must be required and have an valid email"
                    },
                    "password": {
                      "type": "string",
                      "example": "must be required and have more than 8 character"
                    },
                    "dob": {
                      "type": "string",
                      "example": "must be required and between today and after 1990"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "bad_request_json": {
        "description": "bad request on json body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "body contains badly-formed JSON (at character 20)"
                }
              }
            }
          }
        }
      },
      "resource_conflict": {
        "description": "conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "requirest conflicted, please try again"
                }
              }
            }
          }
        }
      },
      "invalid_refresh_cookie": {
        "description": "not having a refreshToken cookie",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/auth_response_forbidden"
            }
          }
        }
      },
      "invalid_creds_refresh_token": {
        "description": "invalid refreshToken Cookie",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/auth_response_unauth_token"
            }
          }
        }
      },
      "not_found_user_id": {
        "description": "userId not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "userId is not found"
                }
              }
            }
          }
        }
      },
      "forbidden_access": {
        "description": "forbidden access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "example": "fail"
                },
                "message": {
                  "type": "string",
                  "example": "you shouldnt access this resource"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "authReq": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "authRes": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        }
      },
      "user": {
        "required": [
          "dob",
          "email",
          "fullName",
          "alias"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Najwa Sihab"
          },
          "alias": {
            "type": "string",
            "example": "theQueen"
          },
          "email": {
            "uniqueItems": true,
            "type": "string",
            "format": "email"
          },
          "dob": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "ReqUser": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/user"
          }
        ]
      },
      "ResUser": {
        "required": [
          "createdAt",
          "id",
          "profilePicture",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "fullName": {
            "type": "string",
            "example": "Najwa Sihab"
          },
          "email": {
            "uniqueItems": true,
            "type": "string",
            "format": "email"
          },
          "profilePicture": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851.png"
          },
          "createdAt": {
            "type": "string",
            "format": "date"
          },
          "updatedAt": {
            "type": "string",
            "format": "date"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/user"
          }
        ]
      },
      "bigUser_obj": {
        "required": [
          "userId",
          "alias"
        ],
        "allOf": [
          {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "format": "uuid"
              },
              "alias": {
                "type": "string",
                "example": "huaa"
              },
              "dob": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "$ref": "#/components/schemas/simple_basic_info"
          },
          {
            "$ref": "#/components/schemas/simple_interest"
          }
        ]
      },
      "tiny_user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fullName": {
            "type": "string",
            "example": "hafid Mahdi"
          },
          "alias": {
            "type": "string",
            "example": "xyedo"
          },
          "profilePic": {
            "type": "string",
            "example": "blindate.com/asfihoaf"
          }
        }
      },
      "conversation": {
        "required": [
          "fromUser",
          "toUser",
          "lastMessage",
          "lastMessageSentAt",
          "chatRows",
          "dayPass"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fromUser": {
            "type": "object",
            "$ref": "#/components/schemas/tiny_user"
          },
          "toUser": {
            "type": "object",
            "$ref": "#/components/schemas/tiny_user"
          },
          "lastMessage": {
            "type": "string",
            "example": "gatau njir"
          },
          "lastMessageSentAt": {
            "type": "string",
            "format": "date"
          },
          "lastMessageSeenAt": {
            "type": "string",
            "format": "date"
          },
          "chatRows": {
            "type": "integer",
            "example": "200"
          },
          "dayPass": {
            "type": "integer",
            "example": "200"
          }
        }
      },
      "simple_basic_info": {
        "type": "object",
        "properties": {
          "gender": {
            "type": "string",
            "example": "Male",
            "enum": [
              "Female",
              "Male",
              "Other"
            ]
          },
          "fromLoc": {
            "type": "string",
            "format": "jakarta"
          },
          "height": {
            "type": "integer",
            "example": "180"
          },
          "educationLevel": {
            "type": "string",
            "enum": [
              "Less than high school diploma",
              "High school",
              "Some college, no degree",
              "Assosiate's Degree",
              "Bachelor's Degree",
              "Master's Degree",
              "Professional Degree",
              "Doctorate Degree"
            ]
          },
          "drinking": {
            "type": "string",
            "enum": [
              "Never",
              "Ocassionally",
              "Once a week",
              "More than 2/3 times a week",
              "Every day"
            ]
          },
          "smoking": {
            "type": "string",
            "enum": [
              "Never",
              "Ocassionally",
              "Once a week",
              "More than 2/3 times a week",
              "Every day"
            ]
          },
          "relationshipPref": {
            "type": "string",
            "enum": [
              "One night Stand",
              "Having fun",
              "Serious"
            ]
          },
          "lookingFor": {
            "type": "string",
            "enum": [
              "Female",
              "Male",
              "Other"
            ]
          },
          "zodiac": {
            "type": "string",
            "enum": [
              "Aries",
              "Taurus",
              "Gemini",
              "Cancer",
              "Leo",
              "Virgo",
              "Libra",
              "Scorpio",
              "Sagittarius",
              "Capricorn",
              "Aquarius",
              "Pisces"
            ]
          },
          "kids": {
            "type": "integer",
            "example": 0
          }
        }
      },
      "basic_info_obj": {
        "required": [
          "userId",
          "gender",
          "lookingFor",
          "createdAt",
          "updatedAt"
        ],
        "allOf": [
          {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "format": "uuid"
              },
              "createdAt": {
                "type": "string",
                "format": "datetime"
              },
              "updatedAt": {
                "type": "string",
                "format": "datetime"
              }
            }
          },
          {
            "$ref": "#/components/schemas/simple_basic_info"
          }
        ]
      },
      "interest_bio": {
        "allOf": [
          {
            "$ref": "#/components/schemas/simple_bio"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "userId": {
                "type": "string",
                "format": "uuid"
              },
              "createdAt": {
                "type": "string",
                "format": "datetime"
              },
              "updatedAt": {
                "type": "string",
                "format": "datetime"
              }
            }
          }
        ]
      },
      "simple_bio": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string",
            "example": "being bored"
          }
        }
      },
      "simple_interest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "bioId": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "$ref": "#/components/schemas/simple_bio"
          },
          {
            "type": "object",
            "properties": {
              "hobbies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_hobbies"
                }
              },
              "movieSeries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_movie_series"
                }
              },
              "travels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_travels"
                }
              },
              "sports": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_sports"
                }
              }
            }
          }
        ]
      },
      "interest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/interest_bio"
          },
          {
            "type": "object",
            "properties": {
              "hobbies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_hobbies"
                }
              },
              "movieSeries": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_movie_series"
                }
              },
              "travels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_travels"
                }
              },
              "sports": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/interest_sports"
                }
              }
            }
          }
        ]
      },
      "interest_hobbies": {
        "type": "object",
        "required": [
          "hobbie"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "hobbie": {
            "type": "string",
            "example": "reading"
          }
        }
      },
      "interest_movie_series": {
        "type": "object",
        "required": [
          "movieSerie"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "movieSerie": {
            "type": "string",
            "example": "game of thrones"
          }
        }
      },
      "interest_travels": {
        "type": "object",
        "required": [
          "travel"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "travel": {
            "type": "string",
            "example": "bali"
          }
        }
      },
      "interest_sports": {
        "type": "object",
        "required": [
          "sport"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "sport": {
            "type": "string",
            "example": "running"
          }
        }
      },
      "inline_response_201": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "confirmation email sent, check your email"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_201_data"
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "$ref": "#/components/schemas/inline_response_200_data"
          }
        }
      },
      "users_userId_body": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Najwa Sihab"
          },
          "alias": {
            "type": "string",
            "example": "najhab"
          },
          "email": {
            "uniqueItems": true,
            "type": "string",
            "format": "email"
          },
          "oldPassword": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          },
          "newPassword": {
            "minLength": 8,
            "type": "string",
            "format": "password"
          },
          "dob": {
            "type": "string",
            "format": "date"
          }
        },
        "anyOf": [
          {
            "required": [
              "newPassword",
              "oldPassword"
            ]
          }
        ]
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "user updated"
          }
        }
      },
      "inline_response_201_data": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          }
        }
      },
      "inline_response_200_data": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/ResUser"
          }
        }
      },
      "auth_response_unauth": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "example": "email or password is invalid"
          }
        }
      },
      "auth_response_unauth_token": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "example": "invalid credentials"
          }
        }
      },
      "auth_response_forbidden": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "example": "Cookie not found in your browser, must be login"
          }
        }
      },
      "auth_post_err_validation": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          },
          "message": {
            "type": "string",
            "example": "please refer to the documentation"
          },
          "errors": {
            "type": "object",
            "example": {
              "email": "required and must be a valid email"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "loginAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "refreshAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "refreshToken"
      }
    }
  },
  "security": [
    {
      "loginAuth": []
    },
    {
      "refreshAuth": []
    }
  ]
}