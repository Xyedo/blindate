// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xyedo/blindate/pkg/repository (interfaces: Match)

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/xyedo/blindate/pkg/entity"
)

// MockMatch is a mock of Match interface.
type MockMatch struct {
	ctrl     *gomock.Controller
	recorder *MockMatchMockRecorder
}

// MockMatchMockRecorder is the mock recorder for MockMatch.
type MockMatchMockRecorder struct {
	mock *MockMatch
}

// NewMockMatch creates a new mock instance.
func NewMockMatch(ctrl *gomock.Controller) *MockMatch {
	mock := &MockMatch{ctrl: ctrl}
	mock.recorder = &MockMatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatch) EXPECT() *MockMatchMockRecorder {
	return m.recorder
}

// GetMatchById mocks base method.
func (m *MockMatch) GetMatchById(arg0 string) (*entity.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchById", arg0)
	ret0, _ := ret[0].(*entity.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchById indicates an expected call of GetMatchById.
func (mr *MockMatchMockRecorder) GetMatchById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchById", reflect.TypeOf((*MockMatch)(nil).GetMatchById), arg0)
}

// InsertNewMatch mocks base method.
func (m *MockMatch) InsertNewMatch(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewMatch", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewMatch indicates an expected call of InsertNewMatch.
func (mr *MockMatchMockRecorder) InsertNewMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewMatch", reflect.TypeOf((*MockMatch)(nil).InsertNewMatch), arg0, arg1)
}

// SelectMatchByUserId mocks base method.
func (m *MockMatch) SelectMatchByUserId(arg0 string) ([]entity.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMatchByUserId", arg0)
	ret0, _ := ret[0].([]entity.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMatchByUserId indicates an expected call of SelectMatchByUserId.
func (mr *MockMatchMockRecorder) SelectMatchByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMatchByUserId", reflect.TypeOf((*MockMatch)(nil).SelectMatchByUserId), arg0)
}

// UpdateMatchById mocks base method.
func (m *MockMatch) UpdateMatchById(arg0 entity.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMatchById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMatchById indicates an expected call of UpdateMatchById.
func (mr *MockMatchMockRecorder) UpdateMatchById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMatchById", reflect.TypeOf((*MockMatch)(nil).UpdateMatchById), arg0)
}
