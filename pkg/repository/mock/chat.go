// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xyedo/blindate/pkg/repository (interfaces: Chat)

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/xyedo/blindate/pkg/entity"
)

// MockChat is a mock of Chat interface.
type MockChat struct {
	ctrl     *gomock.Controller
	recorder *MockChatMockRecorder
}

// MockChatMockRecorder is the mock recorder for MockChat.
type MockChatMockRecorder struct {
	mock *MockChat
}

// NewMockChat creates a new mock instance.
func NewMockChat(ctrl *gomock.Controller) *MockChat {
	mock := &MockChat{ctrl: ctrl}
	mock.recorder = &MockChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChat) EXPECT() *MockChatMockRecorder {
	return m.recorder
}

// DeleteChatById mocks base method.
func (m *MockChat) DeleteChatById(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatById indicates an expected call of DeleteChatById.
func (mr *MockChatMockRecorder) DeleteChatById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatById", reflect.TypeOf((*MockChat)(nil).DeleteChatById), arg0)
}

// InsertNewChat mocks base method.
func (m *MockChat) InsertNewChat(arg0 *entity.Chat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewChat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewChat indicates an expected call of InsertNewChat.
func (mr *MockChatMockRecorder) InsertNewChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewChat", reflect.TypeOf((*MockChat)(nil).InsertNewChat), arg0)
}

// SelectChat mocks base method.
func (m *MockChat) SelectChat(arg0 string, arg1 entity.ChatFilter) ([]entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectChat", arg0, arg1)
	ret0, _ := ret[0].([]entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectChat indicates an expected call of SelectChat.
func (mr *MockChatMockRecorder) SelectChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectChat", reflect.TypeOf((*MockChat)(nil).SelectChat), arg0, arg1)
}

// UpdateSeenChatById mocks base method.
func (m *MockChat) UpdateSeenChatById(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeenChatById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeenChatById indicates an expected call of UpdateSeenChatById.
func (mr *MockChatMockRecorder) UpdateSeenChatById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeenChatById", reflect.TypeOf((*MockChat)(nil).UpdateSeenChatById), arg0)
}
