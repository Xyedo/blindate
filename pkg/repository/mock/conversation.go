// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xyedo/blindate/pkg/repository (interfaces: ConversationRepo)

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/xyedo/blindate/pkg/domain"
	entity "github.com/xyedo/blindate/pkg/entity"
)

// MockConversationRepo is a mock of ConversationRepo interface.
type MockConversationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConversationRepoMockRecorder
}

// MockConversationRepoMockRecorder is the mock recorder for MockConversationRepo.
type MockConversationRepoMockRecorder struct {
	mock *MockConversationRepo
}

// NewMockConversationRepo creates a new mock instance.
func NewMockConversationRepo(ctrl *gomock.Controller) *MockConversationRepo {
	mock := &MockConversationRepo{ctrl: ctrl}
	mock.recorder = &MockConversationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationRepo) EXPECT() *MockConversationRepoMockRecorder {
	return m.recorder
}

// InsertConversation mocks base method.
func (m *MockConversationRepo) InsertConversation(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertConversation", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertConversation indicates an expected call of InsertConversation.
func (mr *MockConversationRepoMockRecorder) InsertConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertConversation", reflect.TypeOf((*MockConversationRepo)(nil).InsertConversation), arg0, arg1)
}

// SelectConversationByUserId mocks base method.
func (m *MockConversationRepo) SelectConversationByUserId(arg0 string, arg1 *entity.ConvFilter) ([]domain.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectConversationByUserId", arg0, arg1)
	ret0, _ := ret[0].([]domain.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectConversationByUserId indicates an expected call of SelectConversationByUserId.
func (mr *MockConversationRepoMockRecorder) SelectConversationByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectConversationByUserId", reflect.TypeOf((*MockConversationRepo)(nil).SelectConversationByUserId), arg0, arg1)
}

// UpdateChatRow mocks base method.
func (m *MockConversationRepo) UpdateChatRow(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatRow", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChatRow indicates an expected call of UpdateChatRow.
func (mr *MockConversationRepoMockRecorder) UpdateChatRow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatRow", reflect.TypeOf((*MockConversationRepo)(nil).UpdateChatRow), arg0)
}

// UpdateDayPass mocks base method.
func (m *MockConversationRepo) UpdateDayPass(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDayPass", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDayPass indicates an expected call of UpdateDayPass.
func (mr *MockConversationRepoMockRecorder) UpdateDayPass(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDayPass", reflect.TypeOf((*MockConversationRepo)(nil).UpdateDayPass), arg0)
}
